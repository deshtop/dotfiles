pmodload 'helper'

BG1='232'       # status
BG2='233'       # elapsed time
BG3='234'       # pwd
BG4='235'       # git
FG1='9'         # red       -> error
FG2='2'         # green     -> background job
FG3='214'       # orange    -> elapsed time 
FG4='222'       # salmon    -> path
FG5='87'        # mint      -> git clean
FG6='174'       # pink/red  -> git dirty


start_time=$SECONDS
function prompt_andi_preexec {
  start_time=$SECONDS
}

function prompt_andi_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  if (( $+functions[git-info] )); then
    git-info
  fi

  timer_result=$(($SECONDS-$start_time))                                                
  start_time=$SECONDS
}

prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && echo -n $3
}

build_prompt() {
  RETVAL=$?
  prompt_status
  prompt_elapsedTime
  prompt_dir
  prompt_git
  prompt_end
}

prompt_status() {
  local symbols
  symbols=()
  [[ $RETVAL -ne 0 ]] && symbols+="%{%F{$FG1}%}✘"
  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{$FG2}%}⚙"

  [[ -n "$symbols" ]] && prompt_segment $BG1 $BG1 "$symbols"
}

prompt_elapsedTime() {
  if [[ $timer_result -ge 3600 ]]; then
    let "timer_hours = $timer_result / 3600"
    let "remainder = $timer_result % 3600"
    let "timer_minutes = $remainder / 60"
    let "timer_seconds = $remainder % 60"
    prompt_segment $BG2 $FG3 "${timer_hours}h${timer_minutes}m${timer_seconds}s"
  elif [[ $timer_result -ge 60 ]]; then
    let "timer_minutes = $timer_result / 60"
    let "timer_seconds = $timer_result % 60"
    prompt_segment $BG2 $FG3 "${timer_minutes}m${timer_seconds}s"
  elif [[ $timer_result -gt 10 ]]; then                                                                 
    prompt_segment $BG2 $FG3 "${timer_result}s"
  fi
}

prompt_dir() {
  prompt_segment $BG3 $FG4 "`get_short_path`"
}

prompt_git() {
  local ref dirty
  if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
    ZSH_THEME_GIT_PROMPT_DIRTY='±'
    dirty=$(parse_git_dirty)
    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="➦ $(git show-ref --head -s --abbrev |head -n1 2> /dev/null)"
    if [[ -n $dirty ]]; then
      prompt_segment $BG4 $FG6
    else
      prompt_segment $BG4 $FG5
    fi
    echo -n "${ref/refs\/heads\//\ue0a0 }$dirty"
  fi
}

prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

function prompt_andi_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  autoload -Uz add-zsh-hook

  add-zsh-hook precmd prompt_andi_precmd
  add-zsh-hook preexec prompt_andi_preexec   
    
  CURRENT_BG='NONE'
  SEGMENT_SEPARATOR='\ue0b0'

  PROMPT='%{%f%b%k%}$(build_prompt) '
  SPROMPT='zsh: correct %F{$FG1}%R%f to %F{$FG2}%r%f [nyae]? '
}

prompt_andi_setup "$@"
